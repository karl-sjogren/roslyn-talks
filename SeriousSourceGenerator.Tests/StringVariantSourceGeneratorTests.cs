using Shouldly;

namespace SeriousSourceGenerator.Tests;

public class StringVariantSourceGeneratorTests
{
    [Fact]
    public void WhenInvoked_WithSingleProperty_GeneratesExpectedOutput() {
        const string input = @"using SeriousSourceGenerator;

namespace MyTestNameSpace {
    internal partial class CoolClass {
        [GenerateStringVariants]
        public string? CoolProp { get; } = ""ZebraTastic!"";

        [GenerateStringVariants]
        public string? CoolPropWithSetter { get; set; } = ""ZebraTastic!"";
    }
}";
        var (diagnostics, sourceOutputs) = TestHelpers.GetGeneratedOutput<StringVariantSourceGenerator>(input);

        diagnostics.ShouldBeEmpty();

        var generatedFile = sourceOutputs.FirstOrDefault(x => x.Filename == "CoolClass_CoolProp_StringVariants.g.cs");

        generatedFile.ShouldNotBeNull();

        generatedFile.Output.ShouldBe(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was geneted by MultiLanguageSourceGenerator.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyTestNameSpace;

#nullable enable

internal partial class CoolClass {
    public Dictionary<string, string?>? CoolPropMultiLang { get; set; }

    public Dictionary<string, string?>? GetCoolPropMultiLang() {
        if(CoolProp is null) {
            return null;
        }

        var prop = CoolPropMultiLang ??= new Dictionary<string, string?>();

        prop[""iv""] = CoolProp;

        return prop;
    }
}
", StringCompareShould.IgnoreLineEndings);
    }
}
